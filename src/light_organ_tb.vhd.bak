library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity light_organ_tb is
end entity;

architecture behave of light_organ_tb is
    component light_organ is
    generic (
        bits : integer := 17;
        G_CLOCKS_PER_PULSE : integer := 25E6
    );
    port (
        CLOCK : in std_logic;
        RST_in : in std_logic;
        RATE_in : in std_logic;
        LEDS : out std_logic_vector(bits downto 0)
    );
    end component;

    constant G_NUM_OF_LEDS : integer := 8;
    constant G_CLOCKS_PER_PULSE : integer := 8;

    signal clk_sig : std_logic := '0';
    signal RST_sig : std_logic := '0';
    signal RATE_sig : std_logic := '0';
    signal LEDS_sig : std_logic_vector(G_NUM_OF_LEDS downto 0);
    signal run : std_logic := '1';

begin
    -- DUT: Instantiating the light_organ component
    DUT: light_organ
        generic map(
            bits => G_NUM_OF_LEDS,
            G_CLOCKS_PER_PULSE => G_CLOCKS_PER_PULSE
        )
        port map(
            CLOCK  => clk_sig,
            RST_in => RST_sig,
            RATE_in => RATE_sig,
            LEDS   => LEDS_sig 
        );

    -- Setting initial values for signals
    RST_sig  <= '0', '1' after 100 ns;
    RATE_sig <= '0', '1' after 30 ns;
    run      <= '1', '0' after 300000 us;

    -- Clock generation process
    clock_create: process
    begin
        while run = '1' loop
            clk_sig <= '1', '0' after 50 us;
            wait for 100 ns;
        end loop;
        wait;
    end process;

end behave;
